package com.cos.book.service;

import java.util.List;


import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cos.book.domain.Book;
import com.cos.book.domain.BookRepository;

import lombok.RequiredArgsConstructor;

// 기능을 정의할 수 있고, 트랜잭션을 관리할 수 있음

@RequiredArgsConstructor
@Service
public class BookService {

	// 함수 => 송금() -> 레파지토리에 여러개의 함수 실행 -> commit or roolback
	private final BookRepository bookRepository;
	
	@Transactional // 서비스 함수가 종료될 때 commit 할지 rollback 할지 트랜잭션 관리하겠다.
	public Book 저장하기(Book book) {
		return bookRepository.save(book);
	}
	
	@Transactional(readOnly = true) // JPA 변경감지라는 내부 기능 활성화 X, update시의 정합성을 유지해줌. insert의 유령데이터현상(팬텀현상) 못 막음
	public Book 한건가져오기(Long id) {
		return bookRepository.findById(id)
				.orElseThrow(()->new IllegalArgumentException("id를 확인해주세요."));
	}
	
	public List<Book> 모두가져오기(){
		return null;
	}
	
	public Book 수정하기(Long id, Book book) {
		return null;
	}
	
	public String 삭제하기(Long id) {
		return null;
	}
}
